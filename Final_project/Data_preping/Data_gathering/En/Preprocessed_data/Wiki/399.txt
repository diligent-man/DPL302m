Programming language theory PLT is a branch of computer science that deals with the design implementation analysis characterization and classification of formal languages known as programming languages and of their individual features
It falls within the discipline of computer science both depending on and affecting mathematics software engineering linguistics and even cognitive science
It has become a well-recognized branch of computer science and an active research area with results published in numerous journals dedicated to PLT as well as in general computer science and engineering publications
In some ways the history of programming language theory predates even the development of programming languages themselves
The lambda calculus developed by Alonzo Church and Stephen Cole Kleene in the s is considered by some to be the world's first programming language even though it was intended to model computation rather than being a means for programmers to describe algorithms to a computer system
Many modern functional programming languages have been described as providing a thin veneer over the lambda calculus and many are easily described in terms of it
The first programming language to be invented was Plankalkl which was designed by Konrad Zuse in the s but not publicly known until and not implemented until
The first widely known and successful high-level programming language was Fortran developed from to by a team of IBM researchers led by John Backus
The success of FORTRAN led to the formation of a committee of scientists to develop a universal computer language the result of their effort was ALGOL
Separately John McCarthy of MIT developed Lisp the first language with origins in academia to be successful
With the success of these initial efforts programming languages became an active topic of research in the s and beyond
Some other key events in the history of programming language theory since then
Noam Chomsky developed the Chomsky hierarchy in the field of linguistics a discovery which has directly impacted programming language theory and other branches of computer scienceThe Simula language was developed by Ole-Johan Dahl and Kristen Nygaard it is widely considered to be the first example of an object-oriented programming language Simula also introduced the concept of coroutines
In Peter Landin is the first to realize Church's lambda calculus can be used to model programming languages
He introduces the SECD machine which interprets lambda expressions
In Landin introduces the J operator essentially a form of continuation
In Landin introduces ISWIM an abstract computer programming language in his article The Next Programming Languages
It is influential in the design of languages leading to the Haskell programming language
In Corrado BÃ¶hm introduced the programming language CUCH Curry-Church
In Christopher Strachey publishes his influential set of lecture notes Fundamental Concepts in Programming Languages introducing the terminology R-values L-values parametric polymorphism and ad hoc polymorphism
Roger Hindley publishes The Principal Type-Scheme of an Object in Combinatory Logic later generalized into the HindleyMilner type inference algorithm
In Tony Hoare introduces the Hoare logic a form of axiomatic semantics
In William Alvin Howard observed that a high-level proof system referred to as natural deduction can be directly interpreted in its intuitionistic version as a typed variant of the model of computation known as lambda calculus
This became known as the CurryHoward correspondenceIn Dana Scott first publishes his work on denotational semantics
In logic programming and Prolog were developed thus allowing computer programs to be expressed as mathematical logic
A team of scientists at Xerox PARC led by Alan Kay develop Smalltalk an object-oriented language widely known for its innovative development environment
It had already been discovered in by the mathematical logician Jean-Yves Girard
From Gerald Jay Sussman and Guy Steele develop the Scheme programming language a Lisp dialect incorporating lexical scoping a unified namespace and elements from the actor model including first-class continuations
Backus at the Turing Award lecture assailed the current state of industrial languages and proposed a new class of programming languages now known as function-level programming languages
In Gordon Plotkin introduces Programming Computable Functions an abstract typed functional language
In Robin Milner introduces the HindleyMilner type inference algorithm for ML
Type theory became applied as a discipline to programming languages this application has led to tremendous advances in type theory over the yearsIn Gordon Plotkin publishes his paper on structured operational semantics
In Gilles Kahn published his paper on natural semantics
There emerged process calculi such as the Calculus of Communicating Systems of Robin Milner and the Communicating sequential processes model of C
Hoare as well as similar models of concurrency such as the actor model of Carl Hewitt
In the release of Miranda sparks an academic interest in lazy-evaluated pure functional programming languages
A committee was formed to define an open standard resulting in the release of the Haskell standard in
Bertrand Meyer created the methodology Design by contract and incorporated it into the Eiffel programming languageGregor Kiczales Jim Des Rivieres and Daniel G
Bobrow published the book The Art of the Metaobject Protocol
Eugenio Moggi and Philip Wadler introduced the use of monads for structuring programs written in functional programming languagesThere are several fields of study which either lie within programming language theory or which have a profound influence on it many of these have considerable overlap
In addition PLT makes use of many other branches of mathematics including computability theory category theory and set theory
Formal semantics is the formal specification of the behaviour of computer programs and programming languages
Three common approaches to describe the semantics or meaning of a computer program are denotational semantics operational semantics and axiomatic semantics
Type theory is the study of type systems which are a tractable syntactic method for proving the absence of certain program behaviors by classifying phrases according to the kinds of values they compute
Many programming languages are distinguished by the characteristics of their type systems
Program analysis is the general problem of examining a program and determining key characteristics such as the absence of classes of program errors
Program transformation is the process of transforming a program in one form language to another form
Comparative programming language analysis seeks to classify programming languages into different types based on their characteristics broad categories of programming languages are often known as programming paradigms
Metaprogramming is the generation of higher-order programs which when executed produce programs possibly in a different language or in a subset of the original language as a result
Domain-specific languages are languages constructed to efficiently solve problems of a particular part of domain
Compiler theory is the theory of writing compilers or more generally translators programs which translate a program written in one language into another form
The actions of a compiler are traditionally broken up into syntax analysis scanning and parsing semantic analysis determining what a program should do optimization improving the performance of a program as indicated by some metric typically execution speed and code generation generation and output of an equivalent program in some target language often the instruction set of a CPU
Run-time systems refer to the development of programming language runtime environments and their components including virtual machines garbage collection and foreign function interfaces
Conferences are the primary venue for presenting research in programming languages
The most well known conferences include the Symposium on Principles of Programming Languages POPL Programming Language Design and Implementation PLDI the International Conference on Functional Programming ICFP the International Conference on Object Oriented Programming Systems Languages and Applications OOPSLA and the International Conference on Architectural Support for Programming Languages and Operating Systems ASPLOS
Notable journals that publish PLT research include the ACM Transactions on Programming Languages and Systems TOPLAS Journal of Functional Programming JFP Journal of Functional and Logic Programming and Higher-Order and Symbolic Computation
Very high-level programming languageAbadi Martn and Cardelli Luca
Theoretical Aspects of Object Oriented Programming Languages Types Semantics and Language Design
Stanford California Center for the Study of Language and Information
Advanced Topics in Types and Programming Languages
Software FoundationsLambda the Ultimate a community weblog for professional discussion and repository of documents on programming language theory
Classic Papers in Programming Languages and Logic
Collected by Karl Crary Carnegie Mellon University
Scott for the ACM Turing Centenary Celebration
In computer science and recursion theory the McCarthy Formalism of computer scientist John McCarthy clarifies the notion of recursive functions by use of the IF THEN ELSE construction common to computer science together with four of the operators of primitive recursive functions zero successor equality of numbers and composition The conditional operator replaces both primitive recursion and the mu operator
McCarthy described his formalism this way
In this article we first describe a formalism for defining functions recursively We believe this formalism has advantages both as a programming language and as a vehicle for developing a theory of computation
We shall need a number of mathematical ideas and notations concerning functions in general Most of the ideas are well known but the notion of conditional expression is believed to be new and the use of conditional expressions permits functions to be defined recursively in a new and convenient way In his Computation Finite and Infinite Machines Marvin Minsky in his Conditional Expressions The McCarthy Formalism describes the formalism as follows
Practical computer languages do not lend themselves to formal mathematical treatment they are not designed to make it easy to prove theorems about the procedures they describe In a paper by McCarthy we find a formalism that enhances the practical aspect of the recursive function concept while preserving and improving its mathematical clarity McCarthy introduces conditional expressions of the form
f if p then e else e
where the ei are expressions and p is a statement or equation that may be true or false This expression means
See if p is true if so the value of f is given by e
IF p is false the value of f is given by e
This conditional expression has also the power of the minimization operator
The McCarthy formalism is like the general recursive Kleene system in being based on some basic functions composition and equality but with the conditional expression alone replacing both the primitive recursive scheme and the minimization operator Minsky Minsky uses the following operators in his demonstrations
Conditional expressionFrom these he shows how to derive the predecessor function i e DECREMENT with this tool he derives the minimization operator necessary for general recursion as well as primitive recursive definitions
In his Introduction of Meta Mathematics Stephen Kleene provides a definition of what it means to be a primitive recursive function
A function is primitive recursive in k briefly if there is a finite sequence k of occurrences of functions such that each function of the sequence is either one of the functions the assumed functions or an initial function or an immediate dependent of preceding functions and the last function k is Kleene In other words given a basis function it can be a constant such as primitive recursion uses either the base or the previous value of the function to produce the value of the function primitive recursion is sometimes called mathematical induction
Minsky above is describing a two CASE operator A demonstration that the nested IF THEN ELSE the case statement or switch statement is primitive recursive can be found in Kleene at F 'mutually exclusive predicates' The CASE operator behaves like a logical multiplexer and is simply an extension of the simpler two case logical operator sometimes called AND OR SELECT see more at Propositional formula The CASE operator for three cases would be verbally described as If X is CASE then DO p else if X is CASE then do q else if X is CASE then do r else do default
Boolos Burgess Jeffrey observe that in a particular instance the CASE operator or a sequence of nested IF THEN ELSE statements must be both mutually exclusive meaning that only one case holds is true and collectively exhaustive meaning every possible situation or case is covered These requirements are a consequence of the determinacy of Propositional logic the correct implementation requires the use of truth tables and Karnaugh maps to specify and simplify the cases see more at Propositional formula The authors point out the power of definition by cases
in more complicated examples definition by cases makes it far easier to establish the primitive recursiveness of important functions This is mainly because there are a variety of processes for defining new relations from old that can be shown to produce new primitive recursive relations when applied to primitive recursive relations Boolos Burgess Jeffrey They prove in particular that the processes of substitution graph relation similar to the identity relation that plucks out the value of a particular variable from a list of variables negation logical NOT conjunction logical AND disjunction logical OR bounded universal quantification or bounded existential quantification can be used together with definition by cases to create new primitive recursive functions cf Boolos Burgess Jeffrey
De Bruijn indexGeorge S Boolos John P Burgess and Richard C Jeffrey Computability and Logic Fourth Edition Cambridge University Press Cambridge UK ISBN paperback
John McCarthy Recursive Functions of Symbolic Expressions and Their Computation by Machine Part I Communications of the ACM April
John McCarthy A Basis for a Mathematical Theory of Computation Computer Programming and Formal Systems pp
Marvin Minsky Computation Finite and Infinite Machines Prentice Hall Inc Englewood Cliffs NJ